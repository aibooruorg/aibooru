daemon off;
worker_processes 1;
pcre_jit on;

error_log stderr info;
pid /tmp/nginx.pid;

# If true, assume we're behind a reverse proxy.
env DANBOORU_REVERSE_PROXY;

# The external port the Nginx Docker container is listening on.
env DANBOORU_PORT;

events {}

http {
  charset utf-8;
  include mime.types;

  sendfile on;
  tcp_nopush on;
  access_log /dev/stdout;

  client_body_temp_path /tmp/nginx-client-body;
  proxy_temp_path       /tmp/nginx-proxy;
  fastcgi_temp_path     /tmp/nginx-fastcgi;
  uwsgi_temp_path       /tmp/nginx-uwsgi;
  scgi_temp_path        /tmp/nginx-scgi;

  gzip on;
  gzip_comp_level 5;
  gzip_types application/xml+rss application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/javascript text/plain;
  gzip_proxied any;
  gzip_vary on;

  server {
    server_name _;
    listen 3000;

    set_by_lua $reverse_proxy 'return os.getenv("DANBOORU_REVERSE_PROXY")';
    set_by_lua $danbooru_port 'return os.getenv("DANBOORU_PORT")';

    # Go to http://localhost:3000/nginx/headers to see the raw HTTP headers received by Nginx. Useful for debugging reverse proxy setups.
    location = /nginx/headers {
      echo_duplicate 1 $echo_client_request_headers;
      echo "\r";
    }

    location ~ ^/(packs/|fonts/|images/|favicon\.ico$|favicon\.svg$|apple-touch-icon\.png$|apple-touch-icon-precomposed\.png$) {
      root /danbooru/public;
      expires max;
    }

    location /data {
      root /images;
      expires max;

      rewrite (.*)/__.+?__(.+)$ $1/$2;
      rewrite ^/data/(.*) /$1 break;

      if ($arg_download) {
        more_set_headers 'Content-Disposition: attachment';
      }
    }

    location / {
      proxy_pass http://danbooru:3000;
      proxy_redirect off;
      proxy_buffering on;

      set_by_lua_block $forwarded_host {
        if ngx.var.reverse_proxy == "true" and ngx.var.http_x_forwarded_host then
          ngx.req.set_header("X-Forwarded-For",   ngx.var.proxy_add_x_forwarded_for)
          ngx.req.set_header("X-Forwarded-Host",  ngx.var.http_x_forwarded_host)
          ngx.req.set_header("X-Forwarded-Port",  ngx.var.http_x_forwarded_port)
          ngx.req.set_header("X-Forwarded-Proto", ngx.var.http_x_forwarded_proto)
          return ngx.var.http_x_forwarded_host
        else
          ngx.req.set_header("X-Forwarded-For",   ngx.var.remote_addr)
          ngx.req.set_header("X-Forwarded-Host",  ngx.var.http_host)
          ngx.req.set_header("X-Forwarded-Port",  ngx.var.danbooru_port)
          ngx.req.set_header("X-Forwarded-Proto", ngx.var.scheme)
          return ngx.var.http_host
        end
      }

      proxy_set_header Host $forwarded_host;

      client_max_body_size 100m;
    }
  }
}
