#!/usr/bin/env ruby

# Displays test results in Github. Outputs an annotation for each test failure and a test summary at the end. Can be
# used outside of Github, in which case it just prints plain text. Works by parsing the JUnit output files generated by
# Minitest::Reporters::JUnitReporter and printing Github workflow commands to stdout.
#
# Usage: `bin/rails test; bin/github-print-test-results`
#
# https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message
# https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary
# https://github.github.com/gfm/

require_relative "../config/environment"

def parse_files(filenames)
  filenames.flat_map do |filename|
    xml = File.read(filename)
    Nokogiri::XML.parse(xml).css("testcase")
  end
end

# XXX Currently Github only supports 10 error annotations and 10 warning annotations per workflow step. If there are
# more test failures than this, they will be ignored.
def print_annotations(testcases)
  testcases.each do |tc|
    if tc.at_css("failure, error, skipped").present?
      if tc.at_css("skipped").present?
        type = "notice"
        message = "Skipped test."
      else
        type = "error"
        message = tc.text.to_s.strip.remove(/test_: |\(Minitest::Result\) /)
      end

      title = "#{tc[:classname]}: #{tc[:name].delete_prefix("test_:").strip.delete_suffix(".")} (#{tc[:time].to_f.round(2)}s)"
      puts "::#{type} file=#{File.realpath(tc[:file])},line=#{tc[:lineno]},title=#{github_escape(title)}::#{github_escape(message)}"
    end
  end
end

def print_table(testcases, output = StringIO.new, repo: ENV["GITHUB_REPOSITORY"], commit: ENV["GITHUB_SHA"])
  output.puts "### Failed"
  output.puts
  output.puts "<table>"

  testcases.each do |tc|
    if tc.at_css("failure, error").present?
      title = ":anger: #{tc[:classname]}: #{tc[:name].delete_prefix("test_:").strip.delete_suffix(".").upcase_first} (#{tc[:time].to_f.round(2)}s)"
      message = tc.text.to_s.strip.remove(/^Failure:|^test_: |\(Minitest::Result\) \[.*\]:/)
      link = "[#{ERB::Util.h(File.basename(tc[:file]))}:#{tc[:lineno]}](https://github.com/#{repo}/blob/#{commit}/#{ERB::Util.h(tc[:file])}#L#{tc[:lineno]})"

      output.puts <<~EOS
        <tr>
          <td>
            <details>
              <summary>#{ERB::Util.h(title)}</summary>
              <pre>#{ERB::Util.h(message)}</pre>
            </details>
          </td>
          <td>

          #{link}

          </td>
        </tr>
      EOS
    end
  end

  output.puts "</table>"
  output.puts
  output.puts "### Skipped"
  output.puts
  output.puts "<table>"

  testcases.each do |tc|
    if tc.at_css("skipped").present?
      title = "#{tc[:classname]}: #{tc[:name].delete_prefix("test_:").strip.delete_suffix(".").upcase_first}"
      link = "[#{ERB::Util.h(File.basename(tc[:file]))}:#{tc[:lineno]}](https://github.com/#{repo}/blob/#{commit}/#{ERB::Util.h(tc[:file])}#L#{tc[:lineno]})"

      output.puts <<~EOS
        <tr>
          <td>#{ERB::Util.h(title)}</td>
          <td>

          #{link}

          </td>
        </tr>
      EOS
    end
  end

  output.puts "</table>"
end

def print_summary(testcases, output)
  tests = testcases.count
  assertions = testcases.sum { _1[:assertions].to_i }
  failures = testcases.count { _1.at_css("failure") }
  errors = testcases.count { _1.at_css("error") }
  skips = testcases.count { _1.at_css("skipped") }
  passes = tests - failures - errors - skips
  seconds = testcases.sum { _1[:time].to_f }

  # https://github.com/test-summary/action
  output.puts "![](https://svg.test-summary.com/dashboard.svg?p=#{passes}&f=#{failures + errors}&s=#{skips})"
  output.puts
  output.print "#{pluralize(tests, "test")}, #{pluralize(assertions, "assertion")}, #{pluralize(failures, "failure")}, #{pluralize(errors, "error")}, #{pluralize(skips, "skip")}"
  output.puts ", finished in #{ApplicationController.helpers.duration_to_hhmmss(seconds)} (#{(seconds / tests).round(2)}s/test, #{(seconds / assertions).round(2)}s/assertion)" if tests.nonzero? && assertions.nonzero?
  output.puts
  print_table(testcases, output)
end

def github_escape(str)
  str.gsub(/[%\n\r]/, { "%" => "%25", "\n" => "%0A", "\r" => "%0D" })
end

def pluralize(count, string)
  "#{count} #{string.pluralize(count)}"
end

def main(filenames)
  summary_file = ENV["GITHUB_STEP_SUMMARY"].present? ? File.open(ENV["GITHUB_STEP_SUMMARY"], "w") : STDOUT

  filenames = ["**/TEST-*.xml"] if filenames.blank? # XXX doesn't follow symlinks
  filenames = filenames.flat_map { |filename| Dir.glob(filename) }.sort
  testcases = parse_files(filenames)

  print_annotations(testcases)
  print_summary(testcases, summary_file)
end

main(ARGV)
