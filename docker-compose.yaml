# This is a Docker Compose file that will launch a minimal Danbooru instance.
# This is suitable as a quick demo or for personal use, but is not recommended
# for a large public-facing site.
#
# ## Quickstart
#
# Run `docker compose up` to start a Danbooru instance on http://localhost:3000.
#
# Run `docker compose down` to stop the instance.
#
# Run `docker volume rm danbooru-data danbooru-images iqdb-data` to delete all
# your data if you no longer need it.
#
# See below for more commands for running your instance.
#
# ## Configuration
#
# To configure your instance, edit the files `.env.local` or `config/danbooru_local_config.rb`
# outside the container.
#
# Start by copying either `config/danbooru_default_config.rb` to `config/danbooru_local_config.rb`,
# or `.env` to `.env.local`. Then edit the files as needed.
#
# See `config/danbooru_default_config.rb` for the default settings.
#
# ## Usage
#
#  # Start a Danbooru instance on http://localhost:3000.
#  docker compose up
#
#  # Stop the instance.
#  docker compose down
#
#  # Upgrade the instance to the latest version of Danbooru.
#  docker compose pull
#  docker compose restart
#
#  # Backup the database and images.
#  docker compose run --rm -T danbooru bin/rails danbooru:database:backup > danbooru-database.pg_dump
#  docker compose run --rm -T danbooru bin/rails danbooru:images:backup > danbooru-images.tar
#  docker compose cp iqdb:/iqdb/data/iqdb.sqlite ./
#
#  # Restore the database and images from backup.
#  docker compose down
#  docker volume rm danbooru-data danbooru-images iqdb-data
#  docker compose run --rm -T danbooru bin/rails danbooru:database:restore < danbooru-database.pg_dump
#  docker compose run --rm -T danbooru bin/rails danbooru:images:restore < danbooru-images.tar
#  docker compose cp ./iqdb.sqlite iqdb:/iqdb/data/iqdb.sqlite
#
#  # Delete all the data for the instance.
#  docker compose down
#  docker volume rm danbooru-data danbooru-images iqdb-data
#
#  # Start a Bash shell inside the instance (for debugging).
#  docker compose run --rm danbooru bash
#
#  # Start a Rails console inside the instance (for debugging)
#  docker compose run --rm danbooru bin/rails console
#
#  # Start a Postgres shell inside the instance (for debugging)
#  docker compose run --rm danbooru bin/rails dbconsole -p
#
#  # Start two instances of Danbooru at the same time, one named `danbooru-latest` and the other
#  # `danbooru-production`. Good for comparing two different versions of Danbooru.
#  DANBOORU_PORT=3000 DANBOORU_IMAGE=ghcr.io/danbooru/danbooru:latest docker compose -p danbooru-latest up
#  DANBOORU_PORT=3001 DANBOORU_IMAGE=ghcr.io/danbooru/danbooru:production docker compose -p danbooru-production up
#  docker compose -p danbooru-latest down --volumes
#  docker compose -p danbooru-production down --volumes
#
#  # Show the logs for the Danbooru container.
#  docker compose logs -f danbooru
#
# References:
#
# * https://docs.docker.com/get-docker/
# * https://docs.docker.com/compose/install/
# * https://docs.docker.com/compose/release-notes

# You can change the name to run multiple Danbooru instances simultaneously.
# This doesn't change the name of the site, it only affects the name used by Docker Compose.
name: danbooru

x-base-template: &base-template
  # You can set DANBOORU_IMAGE to `ghcr.io/danbooru/danbooru:master` to get the latest unstable release,
  # or e.g. `ghcr.io/danbooru/danbooru:production-2024.01.12-055003-utc` to get a specific stable version.
  #
  # See https://github.com/danbooru/danbooru/pkgs/container/danbooru for a list of versions
  image: ${DANBOORU_IMAGE:-ghcr.io/danbooru/danbooru:production}

  read_only: true
  restart: unless-stopped

  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
    start_period: 15s
    interval: 10s
    retries: 1

  environment:
    # You can set DANBOORU_CANONICAL_URL if you have a domain name for your site.
    # DANBOORU_CANONICAL_URL: https://danbooru.mydomain.com
    # DANBOORU_HOSTNAME: danbooru.mydomain.com
    DANBOORU_CANONICAL_URL: http://localhost:${DANBOORU_PORT:-3000}

    # You should set DANBOORU_SECRET_KEY_BASE to a random secret string. If you
    # don't set this, you will be logged out every time you restart the instance.
    #
    # Keep this secret. If someone finds this out, they will be able to log in as any user.
    # DANBOORU_SECRET_KEY_BASE: "<random secret password>"

    # Don't change the options below.
    RAILS_ENV: production
    DATABASE_URL: postgresql://danbooru@postgres/danbooru
    DANBOORU_REDIS_URL: redis://redis:6379
    DANBOORU_IQDB_URL: http://iqdb:5588
    DANBOORU_AUTOTAGGER_URL: http://autotagger:5000
    DANBOORU_IMAGE_STORAGE_PATH: /images

  volumes:
    - target: /tmp
      type: tmpfs
    - danbooru-images:/images

  configs:
    - source: danbooru_local_config
      target: /danbooru/config/danbooru_local_config.rb

services:
  danbooru:
    <<: *base-template
    depends_on:
      postgres:
        condition: service_healthy
    command: ["bash", "-c", "bin/rails db:prepare && bin/rails server -b 0.0.0.0"]

  cron:
    <<: *base-template
    depends_on:
      danbooru:
        condition: service_healthy
    command: ["bin/rails", "danbooru:cron"]

  jobs:
    <<: *base-template
    depends_on:
      danbooru:
        condition: service_healthy
    command: ["bin/good_job", "start"]

  # https://github.com/danbooru/iqdb
  # https://hub.docker.com/repository/docker/evazion/iqdb
  iqdb:
    image: evazion/iqdb
    volumes:
      - "iqdb-data:/iqdb/data"
    command: ["http", "0.0.0.0", "5588", "/iqdb/data/iqdb.sqlite"]

  redis:
    image: redis

  postgres:
    image: ghcr.io/danbooru/postgres:16.1
    environment:
      POSTGRES_USER: danbooru
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "danbooru"]
      start_period: 10s
      interval: 1s
      retries: 1
    volumes:
      - "danbooru-data:/var/lib/postgresql/data"

  nginx:
    image: ${DANBOORU_IMAGE:-ghcr.io/danbooru/danbooru:production}
    command: ["openresty", "-e", "/dev/stderr"]
    ports:
      - "${DANBOORU_PORT:-3000}:3000"
    depends_on:
      danbooru:
        condition: service_started
    configs:
      - source: nginx
        target: /usr/local/nginx/conf/nginx.conf
    volumes:
      - "danbooru-images:/images"

  autotagger:
    image: ghcr.io/danbooru/autotagger:latest

configs:
  danbooru_local_config:
    file: config/danbooru_local_config.rb
  nginx:
    file: config/nginx.conf

volumes:
  danbooru-images:
    name: ${COMPOSE_PROJECT_NAME}-images
  danbooru-data:
    name: ${COMPOSE_PROJECT_NAME}-data
  iqdb-data:
    name: ${COMPOSE_PROJECT_NAME}-iqdb-data
